{
  "name": "coffee-react",
  "description": "Coffeescript compiler wrapper adding coffee-react-transform CJSX support",
  "keywords": [
    "coffeescript",
    "react",
    "jsx",
    "cjsx",
    "coffee-react"
  ],
  "author": {
    "name": "James Friend"
  },
  "version": "0.1.0",
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/jsdf/coffee-react/master/LICENSE"
    }
  ],
  "files": [
    "register.js",
    "bin/",
    "lib/"
  ],
  "main": "./lib/coffee-react-script",
  "bin": {
    "cjsx": "./bin/cjsx",
    "csx-coffee": "./bin/csx-coffee"
  },
  "scripts": {
    "prepublish": "cake build",
    "test": "tap test/*.coffee"
  },
  "homepage": "https://github.com/jsdf/coffee-react",
  "bugs": {
    "url": "https://github.com/jsdf/coffee-react/issues"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jsdf/coffee-react.git"
  },
  "dependencies": {
    "mkdirp": "~0.3.5",
    "coffee-script": "^1.7.1",
    "coffee-react-transform": "^0.2.0"
  },
  "devDependencies": {
    "concat-stream": "^1.4.5",
    "tap": "^0.4.9"
  },
  "readme": "# Coffee-React\n\nProvides the `cjsx` executable, a wrapper for the Coffeescript compiler using [coffee-react-transform](https://github.com/jsdf/coffee-react-transform) so you can build [React](http://facebook.github.io/react/) components in Coffeescript with JSX-like markup.\n\n### Example\n\nneat-component.cjsx\n```coffee\n# @cjsx React.DOM \n\nNeatComponent = React.createClass\n  render: ->\n    {showTitle, neat} = @props\n\n    <div className=\"neat-component\">\n      {<h1>A Component is I</h1> if showTitle}\n      Coffeescript really saves a lot of typing...\n      {<p>is this component neat?<br />{neat}x{times}</p> for times in [1..10]}\n    </div>\n```\n\ncompile it\n```bash\n$ cjsx -cb neat-component.cjsx\n```\n\nneat-component.js\n```js\n// Generated by CoffeeScript 1.7.1\nvar NeatComponent;\n\nNeatComponent = React.createClass({\n  render: function() {\n    var neat, showTitle, times, _ref;\n    _ref = this.props, showTitle = _ref.showTitle, neat = _ref.neat;\n    return React.DOM.div({\n      \"className\": \"neat-component\"\n    }, (showTitle ? React.DOM.h1(null, \"A Component is I\") : void 0), \"Coffeescript really saves a lot of typing...\", (function() {\n      var _i, _results;\n      _results = [];\n      for (times = _i = 1; _i <= 10; times = ++_i) {\n        _results.push(React.DOM.p(null, \"is this component neat?\", React.DOM.br(null), neat, \"x\", times));\n      }\n      return _results;\n    })());\n  }\n});\n```\n\n### Installation\n```bash\nnpm install -g coffee-react\n```\n\n### Usage\n\n```\n$ cjsx -h \n\nUsage: cjsx [options] path/to/script.cjsx -- [args]\n\nIf called without options, `cjsx` will run your script.\n\n  -b, --bare         compile without a top-level function wrapper\n  -c, --compile      compile to JavaScript and save as .js files\n  -e, --eval         pass a string from the command line as input\n  -h, --help         display this help message\n  -j, --join         concatenate the source CoffeeScript before compiling\n  -m, --map          generate source map and save as .map files\n  -n, --nodes        print out the parse tree that the parser produces\n      --nodejs       pass options directly to the \"node\" binary\n      --no-header    suppress the \"Generated by\" header\n  -o, --output       set the output directory for compiled JavaScript\n  -p, --print        print out the compiled JavaScript\n  -s, --stdio        listen for and compile scripts over stdio\n  -l, --literate     treat stdio as literate style coffee-script\n  -t, --tokens       print out the tokens that the lexer/rewriter produce\n  -v, --version      display the version number\n  -w, --watch        watch scripts for changes and rerun commands\n\n```\n\nOutput compiled JS to a file of the same name:\n```bash\n$ cjsx -c my-component.cjsx\n```\n\n#### Require .cjsx files under node\nAs with the `coffee-script` module, you need to register .cjsx with the module loader:\n```coffee\nrequire('coffee-react').register()\n\nComponent = require('./component.cjsx')\n\n```\n\nIf you just want to transform CJSX markup into valid Coffeescript code as part of your existing build process see [coffee-react-transform](https://github.com/jsdf/coffee-react-transform), which is the main parser/transformer package.\n",
  "readmeFilename": "README.md",
  "_id": "coffee-react@0.1.0",
  "_shasum": "0a3cdd21ee5814c5887fdec9cf763d9eebea1ecb",
  "_from": "coffee-react@^0.1.0",
  "_resolved": "https://registry.npmjs.org/coffee-react/-/coffee-react-0.1.0.tgz"
}
